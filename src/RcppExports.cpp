// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// gomp_fit_c
Rcpp::List gomp_fit_c(const arma::colvec& x, const arma::colvec& y, const arma::colvec& parstart, double eps, double lambda, double lamup, double lamdown);
RcppExport SEXP _armor_gomp_fit_c(SEXP xSEXP, SEXP ySEXP, SEXP parstartSEXP, SEXP epsSEXP, SEXP lambdaSEXP, SEXP lamupSEXP, SEXP lamdownSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type parstart(parstartSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lamup(lamupSEXP);
    Rcpp::traits::input_parameter< double >::type lamdown(lamdownSEXP);
    rcpp_result_gen = Rcpp::wrap(gomp_fit_c(x, y, parstart, eps, lambda, lamup, lamdown));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_armor_gomp_fit_c", (DL_FUNC) &_armor_gomp_fit_c, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_armor(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
